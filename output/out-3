

=================================================== start preprocessing ===================================================
Number of vertices: 8
Number of partitions: 2
Number of exec threads: 16
Number of write threads: 1

partition 0 , start: 0 , end: 3
partition 1 , start: 4 , end: 7
=================================================== finish preprocessing ===================================================


=================================================== init ===================================================
edges of streaming 0:

(0, 1 - 1, 0)
(1, 3 - 3, 0)
(3, 2 - 2, 0)
(2, 2 - 0, 0)
(2, 0 - 4, 0)
edges of streaming 0:

(4, 5 - 5, 0)
(5, 7 - 7, 0)
(7, 6 - 6, 0)
(6, 0 - 4, 0)
u, 0, 5, 16, 80


=================================================== Iteration 1 ===================================================

----------------------------------- joining -----------------------------------
u, 1, 5, 24, 120

----------------------------------- aggregating -----------------------------------
aggregate local: 
size_of_in_tuple = 24, size_of_agg = 36
get an in update tuple
in_update: 	([0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [3, 3, 0, 0, 1])
turn tuple into quick pattern
quick_pattern: 	([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1])
in_update: 	([0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [3, 3, 0, 0, 1])

get an in update tuple
in_update: 	([2, 0, 0, 0, 0], [4, 0, 0, 0, 0], [5, 3, 0, 0, 1])
turn tuple into quick pattern
quick_pattern: 	([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1])
in_update: 	([2, 0, 0, 0, 0], [4, 0, 0, 0, 0], [5, 3, 0, 0, 1])

get an in update tuple
in_update: 	([4, 0, 0, 5, 0], [5, 0, 0, 0, 0], [7, 3, 0, 0, 1])
turn tuple into quick pattern
quick_pattern: 	([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1])
in_update: 	([4, 0, 0, 5, 0], [5, 0, 0, 0, 0], [7, 3, 0, 0, 1])

print out quick pattern
quick pattern map: 
([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1]) --> 3

print out canonical graph
canonical graph map: 
{([1, 0, 0, 0, 0], [3, 0, 0, 0, 0], [2, 0, 0, 0, 1]); 3; 4110465937} --> 3

get an in update tuple
in_update: 	([1, 0, 0, 3, 0], [3, 0, 0, 0, 0], [2, 3, 0, 0, 1])
turn tuple into quick pattern
quick_pattern: 	([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1])
in_update: 	([1, 0, 0, 3, 0], [3, 0, 0, 0, 0], [2, 3, 0, 0, 1])

get an in update tuple
in_update: 	([5, 0, 0, 7, 0], [7, 0, 0, 0, 0], [6, 3, 0, 0, 1])
turn tuple into quick pattern
quick_pattern: 	([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1])
in_update: 	([5, 0, 0, 7, 0], [7, 0, 0, 0, 0], [6, 3, 0, 0, 1])

print out quick pattern
quick pattern map: 
([1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [3, 3, 0, 0, 1]) --> 2

print out canonical graph
canonical graph map: 
{([1, 0, 0, 0, 0], [3, 0, 0, 0, 0], [2, 0, 0, 0, 1]); 3; 4110465937} --> 2

Number of tuples in agg 1: 	1
Size of agg: 	36
a, 1, 1, 36, 36


=================================================== Iteration 2 ===================================================

----------------------------------- joining -----------------------------------
u, 2, 0, 32, 0

----------------------------------- aggregating -----------------------------------
aggregate local: 
size_of_in_tuple = 32, size_of_agg = 44
print out quick pattern
quick pattern map: 

print out canonical graph
canonical graph map: 

print out quick pattern
quick pattern map: 

print out canonical graph
canonical graph map: 

Number of tuples in agg 3: 	0
Size of agg: 	44
a, 3, 0, 44, 0



=================================================== cleaning ===================================================
Finish motif-counting. Running time : 0.0349781 s


------------------------------ resource usage ------------------------------
Wall time: 0 ms; 0.000 s; 0.000 m; 0.000 h
CPU time: 31.159 ms; 0.031 s; 0.001 m; 0.000 h
Peak memory: 19812.000 KB; 19.348 MB; 0.019 GB
------------------------------ resource usage ------------------------------


